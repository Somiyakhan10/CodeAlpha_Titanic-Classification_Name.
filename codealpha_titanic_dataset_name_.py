# -*- coding: utf-8 -*-
"""CodeAlpha_Titanic-Dataset_Name..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1suNJEV_NSHQl4bOKuHh_rT_UsYH8j16j
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib
from google.colab import files
import io

# Upload the dataset
uploaded = files.upload()

# Print the names of the uploaded files to check their exact names
for filename in uploaded.keys():
    print(f'User uploaded file: {filename}')

# Load the dataset
file_name = list(uploaded.keys())[0]  # Get the name of the uploaded file
data = pd.read_csv(io.BytesIO(uploaded[file_name]))

# Preview the first few rows of the dataset
print("Dataset preview:")
print(data.head())

# Data Preprocessing
# Fill missing values
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)
data['Fare'].fillna(data['Fare'].median(), inplace=True)

# Encode categorical variables
le_sex = LabelEncoder()
data['Sex'] = le_sex.fit_transform(data['Sex'])

le_embarked = LabelEncoder()
data['Embarked'] = le_embarked.fit_transform(data['Embarked'])

# Standardize features
scaler = StandardScaler()
data[['Age', 'Fare']] = scaler.fit_transform(data[['Age', 'Fare']])

# Select features and target variable
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = data[features]
y = data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build and train the RandomForest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print('Accuracy:', accuracy_score(y_test, y_pred))
print('Classification Report:\n', classification_report(y_test, y_pred))
print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred))

# Save the model
joblib.dump(model, 'titanic_model.pkl')
print("Model saved as 'titanic_model.pkl'")